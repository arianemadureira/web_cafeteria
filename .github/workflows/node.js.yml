name: Run Tests

on:
  push:

jobs:
  unit-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - run: npm install
      - run: npm run build --if-present
      - run: npm test -- --testPathPattern="tests/domain"
      - name: Check test status
        run: |
          if [ $? -eq 0 ]; then
            echo "All tests passed"
          else
            echo "Tests failed"
            exit 1
          fi
  code-analysis:
    runs-on: ubuntu-latest
    needs: unit-test

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Debug Directory Contents
        run: ls -l

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        with:
          projectBaseDir: app
          args: >
            -Dsonar.organization=arianemadureira
            -Dsonar.projectKey=arianemadureira_web_cafeteria
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
          run: npm install -g sonarqube-scanner
            sonar-scanner \
             -X \
            -Dsonar.projectKey=arianemadureira_web_cafeteria \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN
      - name: Check Quality Gate
        env: 
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
           QUALITY_GATE_STATUS=$(curl -s "https://sonarcloud.io/api/qualitygates/project_status?projectKey=arianemadureira_web_cafeteria" -H "Authorization: Basic $SONAR_TOKEN" | jq -r '.projectStatus.status')
           if [ "$QUALITY_GATE_STATUS" = "OK" ]; then
             echo "QG OK"
           fi
  build:
    runs-on: ubuntu-latest
    needs: code-analysis
    
    steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
            
        - name: Start Docker Compose
          env:
            MARIADB_HOST: ${{ secrets.MARIADB_HOST }}
            MARIADB_USER: ${{ secrets.MARIADB_USER }}
            MARIADB_PASS: ${{ secrets.MARIADB_PASS }}
            MARIADB_DATABASE: ${{ secrets.MARIADB_DATABASE }}
            MARIADB_PORT: ${{ secrets.MARIADB_PORT }}
            MP_URL: ${{ secrets.MP_URL }}
            MP_CLIENT_ID: ${{ secrets.MP_CLIENT_ID }}
            MP_CLIENT_SECRET: ${{ secrets.MP_CLIENT_SECRET }}
          run: |
            docker-compose up -d
        
